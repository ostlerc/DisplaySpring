<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DisplaySpring</name>
    </assembly>
    <members>
        <member name="T:DisplaySpring.Frame">
            <summary>
            A collection of Items that can be handled layouts
            </summary>
        </member>
        <member name="T:DisplaySpring.Item">
            <summary>
            An Item is any sub menu area that needs to interact with other menu parts.
            All items are shown in one menu
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.DefaultSelectSound">
            <summary>
            Default SelectSound
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.DefaultCancelSound">
            <summary>
            Default CancelSound
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.DefaultFocusSound">
            <summary>
            Default FocusSound
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.ButtonTexture">
            <summary>
            Default Background for Buttons
            You still have to set this in your Button constructor
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.ButtonHighlightTexture">
            <summary>
            Default Focus Background (Highlight background) for Buttons
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.ArrowLeft">
            <summary>
            Default Left Arrow for OptionButton
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.ArrowRight">
            <summary>
            Default Right Arrow for OptionButtons
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.DefaultArrowLeftHighlight">
            <summary>
            Default Left Highlight (Focused) Arrow for OptionButtons
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.DefaultArrowRightHighlight">
            <summary>
            Default Right Highlight (Focused) Arrow for OptionButtons
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.m_Focus">
            <summary>
            Do not use this directly. Use the property Focus instead.
            Failure to do so will result in undefined focus behavior
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnRight">
            <summary>
            This delegate is called when the Item with Focus receives a 'Right' motion
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnLeft">
            <summary>
            This delegate is called when the Item with Focus receives a 'Left' motion
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnUp">
            <summary>
            This delegate is called when the Item with Focus receives a 'Up' motion
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnDown">
            <summary>
            This delegate is called when the Item with Focus receives a 'Down' motion
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnA">
            <summary>
            This delegate is called when the Item with Focus receives a button press of 'A'
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnB">
            <summary>
            This delegate is called when the Item with Focus receives a button press of 'B'
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnX">
            <summary>
            This delegate is called when the Item with Focus receives a button press of 'X'
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnY">
            <summary>
            This delegate is called when the Item with Focus receives a button press of 'Y'
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnStart">
            <summary>
            This delegate is called when the Item with Focus receives a button press of 'Start'
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnBack">
            <summary>
            This delegate is called when the Item with Focus receives a button press of 'Back'
            ('Back' is also known as 'Select')
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnFocus">
            <summary>
            This delegate is called when the Item receives Focus
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.OnLoseFocus">
            <summary>
            This delegate is called when the Item loses Focus
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.forceRefresh">
            <summary>
            Will force a refresh on this item.
            If it has a parent, the parent will
            be refreshed as well
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.m_parent">
            <summary>
            Used in association with Parent
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.#ctor(DisplaySpring.Item,DisplaySpring.MultiController)">
            <summary>
            Create an Item with a parent and a controller
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.#ctor(DisplaySpring.Item)">
            <summary>
            Create an Item with a parent
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the Item
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the Item
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Internal Draw with matrix transform. Used for parent->child scale, rotation, position transformations
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.Reset(System.Boolean)">
            <summary>
            Reset the Item to a fresh state
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.refreshItem">
            <summary>
            Refreshes the items properties.
            This is to be called when specific child properties change
            that cause content alignment to change
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.DecomposeMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@,System.Single@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Decomposes a matrix and gets the info out of it
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.Invoke(DisplaySpring.MenuAction)">
            <summary>
            Invokes a delegate if it is not null. Returns true if a delegate was called
            Sets focus to false automatically. This is the primary way to switch focus between items.
            If KeepFocus is true, focus will not be lost automatically. KeepFocus in this case
            will reset itself to false automatically for next round to lose focus
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.screenCoords">
            <summary>
            Primary way of finding exactly where an object is on the screen
            Position is relative to parents, this way you can see the absolute position
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.CombineMatrix(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Combine matrix together via matrix multiply
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.AnimationValue(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Returns the animation value for the menu item
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.ScaleImageToWidth(System.Single)">
            <summary>
            Scales the item to fit the desired width
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.ScaleImageToHeight(System.Single)">
            <summary>
            Scales the item to fit the desired height
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.AnimationTransform(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Transform of button with animation transform included. (scale, grow / shrink)
            </summary>
        </member>
        <member name="M:DisplaySpring.Item.doubleMod(System.Double,System.Double)">
            <summary>
            helper function used for animation
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Parent">
            <summary>
            Parent item of the object. The highest parent will always be the BaseFrame of the Menu.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.LayoutStretch">
            <summary>
            Used to know the stretch percentage of a Item.
            Default is 1. This number is taken relative to other Items in a layout.
            It determines the percentage of space given to the item.
            Example: a layout of two items with stretch 1 and 2 would receive 33% and 66%
            of the space respectively
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.HorizontalAlignment">
            <summary>
            Get or Set the horizontal alignment for this item. Center is default
            Setting this might reset Scale value
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.VerticalAlignment">
            <summary>
            Get or Set the vertical alignment for this item. Center is default
            Setting this might reset Scale value
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.KeepFocus">
            <summary>
            If set to true, object will keep Focus in an invoke cycle
            This property resets itself to false at the end of the cycle
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.ReadyInput">
            <summary>
            This is true if the item is not ready for user input
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.ForceCancelSound">
            <summary>
            If set to true, object will force a cancel sound even if focus is still true
            This is mostly to be used in association with KeepFocus
            This property resets itself to false after being used up
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Focus">
            <summary>
            Gets or sets the focus for the menu item
            On set to true the OnFocus delegate will be called and FocusSound will play
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Enabled">
            <summary>
            A disabled button will not process in the update function
            This is a simple way to set focus to false without any consequence
            or side effect (like playing sounds, or causing delegates to be called)
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Fade">
            <summary>
            Toggles the fading behavior of the Item. If set to true the item will fade in
            Default is true
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.FadeTime">
            <summary>
            Time item will fade in milliseconds if Fade is true
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Scale">
            <summary>
            Scale of the object
            Default of 1
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Rotation">
            <summary>
            Rotation of the object in radians
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Alpha">
            <summary>
            Transparency of the object. 0 -> 1 = transparent -> visible
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.ScreenAlpha">
            <summary>
            Transparency of the object with parents alpha taken into account
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Position">
            <summary>
            Position of the object. Default is Vector2.Zero, which is center based.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Animation">
            <summary>
            Animation type of the item
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Height">
            <summary>
            Height of the item. Layout space is included. Scale is not included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Width">
            <summary>
            Width of the item. Layout space is included. Scale is not included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.StaticHeight">
            <summary>
            Height of the item. Layout space is not included. Scale is not included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.StaticWidth">
            <summary>
            Width of the item. Layout space is not included. Scale is not included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.StaticSize">
            <summary>
            Represents the Vector2(StaticWidth, StaticHeight) of the object
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.MeasureWidth">
            <summary>
            Measures the Width of the item. Layout space is not included. Scale is included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.MeasureHeight">
            <summary>
            Measures the Height of the item. Layout space is not included. Scale is included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.ItemTransform">
            <summary>
            The matrix transform of the item.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Measure">
            <summary>
            Returns the Vector2(MeasuredWidth, MeasureHeight)of the item. Layout space is not included. Scale is included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Size">
            <summary>
            Returns the Vector2(Width, Height) of the item. Layout space is not included. Scale is included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Visible">
            <summary>
            Visibility determines if item will be drawn.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.FocusSound">
            <summary>
            Sound played when item receives focus
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.CancelSound">
            <summary>
            Sound played when item loses focus.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.ActivateSound">
            <summary>
            Sound played when item recieves an 'A' press.
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.ItemController">
            <summary>
            The item will listen for input on this controller
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.StartAlpha">
            <summary>
            Starting alpha value. Default value of 0
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.EndAlpha">
            <summary>
            Ending alpha value. Default value of 1
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Tint">
            <summary>
            Tint of the item. Default value of Color.White
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Tag">
            <summary>
            User defined data
            </summary>
        </member>
        <member name="P:DisplaySpring.Item.Depth">
            <summary>
            Depth of the Item. Default is Menu.ItemDrawDepth
            By default 0 = front -> 1 = back
            </summary>
        </member>
        <member name="T:DisplaySpring.Item.HorizontalAlignmentType">
            <summary>
            Horizontal alignment types
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.HorizontalAlignmentType.Left">
            <summary>
            Left align
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.HorizontalAlignmentType.Right">
            <summary>
            Right align
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.HorizontalAlignmentType.Center">
            <summary>
            Center align
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.HorizontalAlignmentType.Stretch">
            <summary>
            Stretch contents Width to fit in given space
            </summary>
        </member>
        <member name="T:DisplaySpring.Item.VerticalAlignmentType">
            <summary>
            Vertical alignment types
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.VerticalAlignmentType.Top">
            <summary>
            Top align
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.VerticalAlignmentType.Bottom">
            <summary>
            Bottom align
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.VerticalAlignmentType.Center">
            <summary>
            Center align
            </summary>
        </member>
        <member name="F:DisplaySpring.Item.VerticalAlignmentType.Stretch">
            <summary>
            Stretch contents Height to fit in given space
            </summary>
        </member>
        <member name="M:DisplaySpring.Frame.#ctor(DisplaySpring.Item)">
            <summary>
            Create a Frame with parents size.
            </summary>
        </member>
        <member name="M:DisplaySpring.Frame.#ctor(DisplaySpring.Item,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create a Frame with given size.
            </summary>
        </member>
        <member name="M:DisplaySpring.Frame.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Create a menu frame with specified bounds.
            This is only for the menu class to use as the super parent of a Menu
            </summary>
        </member>
        <member name="P:DisplaySpring.Frame.Layout">
            <summary>
            Defines the LayoutType of the frame.
            </summary>
            <seealso cref="T:DisplaySpring.Frame.LayoutType"/>
        </member>
        <member name="P:DisplaySpring.Frame.StaticHeight">
            <summary>
            Height of the item. Layout space is not included. Scale is not included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Frame.StaticWidth">
            <summary>
            Width of the item. Layout space is not included. Scale is not included.
            </summary>
        </member>
        <member name="P:DisplaySpring.Frame.Position">
            <summary>
            Position of the object. Default is Vector2.Zero, which is center based.
            </summary>
        </member>
        <member name="T:DisplaySpring.Frame.LayoutType">
            <summary>
            The layout type represents how the Children will be
            organized in the space the frame has.
            None is the default type
            </summary>
        </member>
        <member name="F:DisplaySpring.Frame.LayoutType.None">
            <summary>
            No layout, Children will not be arranged. This is the default
            </summary>
        </member>
        <member name="F:DisplaySpring.Frame.LayoutType.Horizontal">
            <summary>
            Horizontally layout Children
            </summary>
        </member>
        <member name="F:DisplaySpring.Frame.LayoutType.Vertical">
            <summary>
            Vertically layout Children
            </summary>
        </member>
        <member name="T:DisplaySpring.Button">
            <summary>
            Button is basically a text button with callbacks
            You can give the button no background and no foreground with just text
            </summary>
        </member>
        <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,DisplaySpring.MultiController,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Create a menu button with specific background
            </summary>
        </member>
        <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,DisplaySpring.MultiController,Microsoft.Xna.Framework.Graphics.Texture2D,System.String)">
            <summary>
            Create a menu item with specific background and text label
            </summary>
        </member>
        <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,DisplaySpring.MultiController,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Create a menu item with specific background and highlight textures
            </summary>
        </member>
        <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,DisplaySpring.MultiController,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.String)">
            <summary>
            Create a menu item with specific background and focus background with text
            </summary>
        </member>
        <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates a static image element
            </summary>
        </member>
        <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,Microsoft.Xna.Framework.Graphics.Texture2D,System.String)">
            <summary>
            Create menu button with specific background and label text
            </summary>
        </member>
        <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Create menu button with specific background and focus background
            </summary>
        </member>
        <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.String)">
            <summary>
            Create menu button with specific background, focus background and label text
            </summary>
        </member>
        <member name="P:DisplaySpring.Button.FocusTexture">
            <summary>
            The focus background of the button.
            This texture is shown when the item has focus
            </summary>
        </member>
        <member name="P:DisplaySpring.Button.Background">
            <summary>
            The main background of the button.
            This texture is shown when the item does not have focus
            </summary>
        </member>
        <member name="P:DisplaySpring.Button.TextLabel">
            <summary>
            Label of the Button
            </summary>
        </member>
        <member name="P:DisplaySpring.Button.Focus">
            <summary>
            Gets or sets the focus for the menu item
            On set to true the OnFocus delegate will be called and FocusSound will play
            </summary>
        </member>
        <member name="P:DisplaySpring.Button.Depth">
            <summary>
            Depth of the button. Default is Menu.ButtonDrawDepth
            By default 0 = front -> 1 = back
            </summary>
        </member>
        <member name="T:DisplaySpring.MultiController">
            <summary>
            A MultiController handles finding input from multiple controllers.
            </summary>
        </member>
        <member name="M:DisplaySpring.MultiController.op_Implicit(DisplaySpring.Controller)~DisplaySpring.MultiController">
            <summary>
            code to convert from Controller to MultiController
            </summary>
        </member>
        <member name="T:DisplaySpring.ScrollList">
            <summary>
            A class to make scrollable viewable lists of Items
            </summary>
        </member>
        <member name="F:DisplaySpring.ScrollList.IndexChanged">
            <summary>
            This is a delegate that is invoked when the index of the ScrollList changes
            </summary>
        </member>
        <member name="M:DisplaySpring.ScrollList.#ctor(DisplaySpring.Item,DisplaySpring.MultiController,System.Int32)">
            <summary>
            Create an empty scroll list that can only show up to 'viewCount' items at one time
            without needing a ScrollBar present.
            </summary>
        </member>
        <member name="M:DisplaySpring.ScrollList.#ctor(DisplaySpring.Item,System.Int32)">
            <summary>
            Create an empty scroll list that can only show up to 'viewCount' items at one time
            without needing a ScrollBar present.
            </summary>
        </member>
        <member name="M:DisplaySpring.ScrollList.#ctor(DisplaySpring.Item,DisplaySpring.MultiController)">
            <summary>
            Create and empty ScrollList
            </summary>
        </member>
        <member name="M:DisplaySpring.ScrollList.#ctor(DisplaySpring.Item)">
            <summary>
            Create and empty ScrollList
            </summary>
        </member>
        <member name="M:DisplaySpring.ScrollList.Reset(System.Boolean)">
            <summary>
            Reset the ScrollList to a fresh state
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.ViewCount">
            <summary>
            The max amount of items in the list to show. Items not visible do not count
            This is a scrolling functionality
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.SelectedIndex">
            <summary>
            The currently selected index
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.Direction">
            <summary>
            Stores the orientation of the object
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.ScrollPosition">
            <summary>
            ScrollBarPosition for the ScrollList's ScrollBar
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.Items">
            <summary>
            Items in the ScrollList
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.Wrap">
            <summary>
            Boolean toggle to define if the container wraps at the ends of the list or does not.
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.Focus">
            <summary>
            Gets or sets the focus for the menu item
            On set to true the OnFocus delegate will be called and FocusSound will play
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.KeepFocus">
            <summary>
            If set to true, object will keep Focus in an invoke cycle
            This property resets itself to false at the end of the cycle
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.Spacing">
            <summary>
            Amount of spacing in pixels between objects
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.ScrollSpacing">
            <summary>
            Spacing between the scrollbar and the items in the list
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollList.SelectedItem">
            <summary>
            gets selected item
            </summary>
        </member>
        <member name="T:DisplaySpring.ScrollList.Orientation">
            <summary>
            Orientation of the ScrollList
            </summary>
        </member>
        <member name="F:DisplaySpring.ScrollList.Orientation.Horizontal">
            <summary>
            Items will be layed out horizontally
            </summary>
        </member>
        <member name="F:DisplaySpring.ScrollList.Orientation.Vertical">
            <summary>
            Items will be layed out Vertically
            </summary>
        </member>
        <member name="T:DisplaySpring.ScrollList.ScrollBarPosition">
            <summary>
            Defines on which side of the list the scroll bar will appear
            Note: For Horizontal, Left signifies Top and Right signifies Bottom
            </summary>
        </member>
        <member name="F:DisplaySpring.ScrollList.ScrollBarPosition.Left">
            <summary>
            ScrolLBar will be on the left side of the ScrollList
            </summary>
        </member>
        <member name="F:DisplaySpring.ScrollList.ScrollBarPosition.Right">
            <summary>
            ScrolLBar will be on the right side of the ScrollList
            </summary>
        </member>
        <member name="T:DisplaySpring.ScrollList.MenuActionInt">
            <summary>
            Delegate that comes with a index parameter
            </summary>
        </member>
        <member name="T:DisplaySpring.Label">
            <summary>
            Class that draws a Item as a text object
            </summary>
        </member>
        <member name="M:DisplaySpring.Label.#ctor(DisplaySpring.Item,System.String)">
            <summary>
            Create a label with text
            </summary>
        </member>
        <member name="P:DisplaySpring.Label.Text">
            <summary>
            Get's or sets the text for the object
            </summary>
        </member>
        <member name="P:DisplaySpring.Label.FontColor">
            <summary>
            Get's or sets the default font color for the object, when object is not focused
            </summary>
        </member>
        <member name="P:DisplaySpring.Label.FontFocusColor">
            <summary>
            Get's or sets the focused font color of the object
            </summary>
        </member>
        <member name="P:DisplaySpring.Label.Font">
            <summary>
            Get's or sets the font value for the object
            </summary>
        </member>
        <member name="T:DisplaySpring.MenuAction">
            <summary>
            A Delegate to represent specific callback events in a menu
            </summary>
        </member>
        <member name="T:DisplaySpring.Menu">
            <summary>
            Base class for a Menu.
            Helps provide easy interfacing with submenus and user input
            </summary>
        </member>
        <member name="F:DisplaySpring.Menu.DefaultFadeTime">
            <summary>
            Amount of time in milliseconds the menu will fade from StartAlpha to EndAlpha
            </summary>
        </member>
        <member name="F:DisplaySpring.Menu.DefaultCloseSound">
            <summary>
            Default sound played when a menu is closed
            </summary>
        </member>
        <member name="F:DisplaySpring.Menu.m_controllers">
            <summary>
            List of controllers the menu uses for input
            </summary>
        </member>
        <member name="F:DisplaySpring.Menu.m_bgs">
            <summary>
            List of sprites to draw for the background. These are static
            images, no interactions or animations. Draws in order given in list
            </summary>
        </member>
        <member name="F:DisplaySpring.Menu.m_position">
            <summary>
            Represents the middle position of the menu 
            </summary>
        </member>
        <member name="M:DisplaySpring.Menu.#ctor(DisplaySpring.MultiController,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            default constructor for a menu
            </summary>
            <param name="c">Controllers that the menu receives input from</param>
            <param name="bounds">Bounds the menu will reside in</param>
        </member>
        <member name="M:DisplaySpring.Menu.op_Implicit(DisplaySpring.Menu)~DisplaySpring.Item">
            <summary>
            convert from Menu to Item
            </summary>
        </member>
        <member name="M:DisplaySpring.Menu.LoadContent(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Loads default content for All Menus and Items
            </summary>
            <param name="gd">Graphics Device of the Game</param>
            <param name="DefaultFont">Default Font the menus will use for drawing text</param>
        </member>
        <member name="M:DisplaySpring.Menu.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates menu screen based on user input
            </summary>
        </member>
        <member name="M:DisplaySpring.Menu.Close">
            <summary>
            Exits the given menu.
            Does nothing if StayAlive is true
            </summary>
        </member>
        <member name="M:DisplaySpring.Menu.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the menu
            </summary>
        </member>
        <member name="M:DisplaySpring.Menu.AddBackground(DisplaySpring.Sprite)">
            <summary>
            Adds a background sprite to the menu.
            Backgrounds are special in that they recieve no
            updates, and are faded in by the menus fade
            </summary>
            <param name="background"></param>
        </member>
        <member name="M:DisplaySpring.Menu.ClearBackgrounds">
            <summary>
            Clear all background sprites for this Menu
            </summary>
        </member>
        <member name="M:DisplaySpring.Menu.Reset(DisplaySpring.Item)">
            <summary>
            Resets the menu. 
            Removes focus from every menu item but the given item
            Alpha is reset to StartAlpha
            All sub menus are reset
            </summary>
        </member>
        <member name="M:DisplaySpring.Menu.Reset">
            <summary>
            Resets the menu. 
            Removes focus from every menu item but the first item in the list.
            Alpha is reset to StartAlpha
            All sub menus are reset
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.BaseFrame">
            <summary>
            The main frame of the menu that spans the boudns of the menu.
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.Font">
            <summary>
            Default text to use for Menu Items that have text
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.KeepState">
            <summary>
            If true the menu will skip Reset() between sub menu calls
            Default true
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.StayAlive">
            <summary>
            If set to true, menu will not close/die 
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.IsAlive">
            <summary>
            if set to false, will take the menu up one level in heirarchy - making this menu not the active menu anymore
            The property is instantly reverted to true after menu has been popped off Menu stack
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.ActiveSubMenu">
            <summary>
            The sub menu to recieve updates.
            When there is a sub menu, the parent menu will not recieve updates
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.StartAlpha">
            <summary>
            When Fade is set to true, this is the starting alpha value
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.EndAlpha">
            <summary>
            When Fade is set to true, this is the ending alpha value
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.OnClosing">
            <summary>
            Delegate called when the menu is about to close
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.OnCloseSound">
            <summary>
            Sound played when menu closes
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.ItemDrawDepth">
            <summary>
            Default draw depth for menu items
            </summary>
        </member>
        <member name="P:DisplaySpring.Menu.MenuBackgroundDrawDepth">
            <summary>
            Default draw depth for backgrounds
            </summary>
        </member>
        <member name="T:DisplaySpring.StackedItem">
            <summary>
            A collection of Items, with only one visible or in focus at a time
            </summary>
        </member>
        <member name="M:DisplaySpring.StackedItem.#ctor(DisplaySpring.Item)">
            <summary>
            Create a StackedItem with parents size.
            </summary>
        </member>
        <member name="M:DisplaySpring.StackedItem.#ctor(DisplaySpring.Item,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create a StackedItem with given size.
            </summary>
        </member>
        <member name="M:DisplaySpring.StackedItem.SetCurrentItem(DisplaySpring.Item)">
            <summary>
            Sets the current item for the stack
            </summary>
        </member>
        <member name="M:DisplaySpring.StackedItem.CurrentItem">
            <summary>
            Get's the currently visible item
            </summary>
        </member>
        <member name="P:DisplaySpring.StackedItem.CurrentIndex">
            <summary>
            Height of the item. Layout space is not included. Scale is not included.
            </summary>
        </member>
        <member name="P:DisplaySpring.StackedItem.Items">
            <summary>
            Gets or sets the current Item list of the stack
            </summary>
        </member>
        <member name="P:DisplaySpring.StackedItem.StaticHeight">
            <summary>
            Height of the item. Layout space is not included. Scale is not included.
            </summary>
        </member>
        <member name="P:DisplaySpring.StackedItem.MeasureHeight">
            <summary>
            Measures the Height of the item. Layout space is not included. Scale is included.
            </summary>
        </member>
        <member name="P:DisplaySpring.StackedItem.StaticWidth">
            <summary>
            Width of the item. Layout space is not included. Scale is not included.
            </summary>
        </member>
        <member name="T:DisplaySpring.OptionButton">
            <summary>
            A collection of Items, with only one visible or in focus at a time
            </summary>
        </member>
        <member name="M:DisplaySpring.OptionButton.#ctor(DisplaySpring.Item,DisplaySpring.MultiController)">
            <summary>
            Create a StackedItem with parents size.
            </summary>
        </member>
        <member name="M:DisplaySpring.OptionButton.#ctor(DisplaySpring.Item)">
            <summary>
            Create a StackedItem with parents size.
            </summary>
        </member>
        <member name="P:DisplaySpring.OptionButton.ArrowsOut">
            <summary>
            Defines if the arrows for the option button are outside the items boundaries
            </summary>
        </member>
        <member name="P:DisplaySpring.Animation.TimeoutMS">
            <summary>
            Time in MS animation will last
            </summary>
        </member>
        <member name="T:DisplaySpring.AnimateType">
            <summary>
            Standard menu animation types
            </summary>
        </member>
        <member name="F:DisplaySpring.AnimateType.None">
            <summary>
            No Animation Type
            </summary>
        </member>
        <member name="F:DisplaySpring.AnimateType.Size">
            <summary>
            The object will animate on its size. Growing and Shrinking over a period of time
            </summary>
        </member>
        <member name="F:DisplaySpring.Sprite.m_texture">
            <summary>
            Texture for the sprite
            </summary>
        </member>
        <member name="F:DisplaySpring.Sprite.pos">
            <summary>
            pos of this Sprite. This value should be used not as an absolute pos
            but as an offset value from its container class
            </summary>
        </member>
        <member name="T:DisplaySpring.ScrollBar">
            <summary>
            Class that handles creating / using textures that represent a ScrollBar
            </summary>
        </member>
        <member name="M:DisplaySpring.ScrollBar.#ctor(DisplaySpring.Item,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            A simple scrollbar that can be vertical or horizontal with a few custom options
            </summary>
            <param name="parent">parent of the scrollbar</param>
            <param name="width">width of the scrollbar</param>
            <param name="height">height of the scrollbar</param>
            <param name="objCount">amount of items in the container</param>
            <param name="visibleUnits">amount of items that can be seen before scrolling is necessary</param>
        </member>
        <member name="M:DisplaySpring.ScrollBar.CreateRectangleBorder(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Create a texture that has a border of 'thickness' pixels. 
            All inside pixels are Color(0,0,0,0)
            </summary>
        </member>
        <member name="M:DisplaySpring.ScrollBar.CreateFilledRectangle(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Create a texture that has each pixel filled with color 'col'
            </summary>
        </member>
        <member name="P:DisplaySpring.ScrollBar.SelectedIndex">
            <summary>
            This is the primary way to scroll the scrollbar
            The SelectedIndex is 0 based
            </summary>
        </member>
        <member name="M:DisplaySpring.Controller.#ctor(Microsoft.Xna.Framework.PlayerIndex,DisplaySpring.UpdateEvent)">
            <summary>
            Create a new controller class
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.Up">
            <summary>
            True if the up key was pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.Down">
            <summary>
            True if the down key was pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.Left">
            <summary>
            True if the left key was pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.Right">
            <summary>
            True if the right key was pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.A">
            <summary>
            True if the A key was pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.B">
            <summary>
            True if the B key was pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.X">
            <summary>
            True if the X key was pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.Y">
            <summary>
            True if the Y key was pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.KeyboardD">
            <summary>
            True if the D key was pressed on the keyboard
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.ExclusiveX">
            <summary>
            True if X and ONLY X is pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.ExclusiveY">
            <summary>
            True if Y and ONLY Y is pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.ExclusiveA">
            <summary>
            True if A and ONLY A is pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.ExclusiveB">
            <summary>
            True if B and ONLY B is pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.LeftShoulder">
            <summary>
            True if the LeftShoulder is pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.RightShoulder">
            <summary>
            True if the right shoulder is pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.LeftTriggerPressed">
            <summary>
            True if the left trigger is being held down
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.RightTriggerPressed">
            <summary>
            True if the right trigger is being held down
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.AnyButton">
            <summary>
            True if any button is pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.Start">
            <summary>
            True if Start is pressed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.MoveUp">
            <summary>
            Float for how much the stick is pushed up (from -1 to 1)
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.MoveRight">
            <summary>
            Float for how much the stick is pushed right (from -1 to 1)
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.MoveDown">
            <summary>
            Float for how much the stick is pushed down (from -1 to 1)
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.MoveLeft">
            <summary>
            Float for how much the stick is pushed left (from -1 to 1)
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.Back">
            <summary>
            True if the Back button is pushed
            </summary>
        </member>
        <member name="P:DisplaySpring.Controller.D">
            <summary>
            True if the D key on the keyboard is pressed (used for entering debug mode)
            </summary>
        </member>
        <member name="T:DisplaySpring.UpdateEvent">
            <summary>
            List of delegates to invoke on an update loop
            </summary>
        </member>
        <member name="M:DisplaySpring.UpdateEvent.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:DisplaySpring.UpdateEvent.AddEvent(DisplaySpring.UpdateEvent.UpdateDelegate)">
            <summary>
            Add an event to delegate
            </summary>
        </member>
        <member name="M:DisplaySpring.UpdateEvent.Update">
            <summary>
            Invoke event for all delegates registered with the event
            </summary>
        </member>
        <member name="T:DisplaySpring.UpdateEvent.UpdateDelegate">
            <summary>
            Delegates for running in an update event
            </summary>
        </member>
        <member name="T:DisplaySpring.ItemCollection">
            <summary>
            A ItemCollection is a list/collection of items that when added parents and children are handled for the user
            </summary>
        </member>
        <member name="M:DisplaySpring.ItemCollection.ClearItems">
            <summary>
            Clear all items in the collection
            </summary>
        </member>
        <member name="M:DisplaySpring.ItemCollection.InsertItem(System.Int32,DisplaySpring.Item)">
            <summary>
            Insert item into the collection at index
            </summary>
        </member>
        <member name="M:DisplaySpring.ItemCollection.RemoveItem(System.Int32)">
            <summary>
            Remove an item from the collection
            </summary>
        </member>
        <member name="M:DisplaySpring.ItemCollection.SetItem(System.Int32,DisplaySpring.Item)">
            <summary>
            Set the specific item in the list to a new value
            </summary>
        </member>
    </members>
</doc>
