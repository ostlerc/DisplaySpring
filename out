diff --git a/DisplaySpring Demo/Menus/FrameMenu.cs b/DisplaySpring Demo/Menus/FrameMenu.cs
index 8d7b0db..bdbe2b4 100755
--- a/DisplaySpring Demo/Menus/FrameMenu.cs	
+++ b/DisplaySpring Demo/Menus/FrameMenu.cs	
@@ -29,28 +29,31 @@
 
             Frame horizontalFrame = new Frame(BaseFrame);
             horizontalFrame.Layout = Layout.Horizontal;
-            horizontalFrame.LayoutStretch = 4;
 
-            btn  = new Button(horizontalFrame, App.Button, "One");
-            btn.VerticalAlignment = VAlign.Top;
-            btn.HorizontalAlignment = HAlign.Left;
+            Label lbl = new Label(horizontalFrame, "One");
+            lbl.VerticalAlignment = VAlign.Top;
+            lbl.HorizontalAlignment = HAlign.Left;
 
-            btn  = new Button(horizontalFrame, App.Button, "Two");
-            btn.VerticalAlignment = VAlign.Top;
-            btn.HorizontalAlignment = HAlign.Right;
+            lbl = new Label(horizontalFrame, "Two");
+            lbl.VerticalAlignment = VAlign.Top;
+            lbl.HorizontalAlignment = HAlign.Right;
 
             horizontalFrame = new Frame(BaseFrame);
-            horizontalFrame.LayoutStretch = 4;
             horizontalFrame.Layout = Layout.Horizontal;
 
-            btn  = new Button(horizontalFrame, App.Button, "Three");
-            btn.VerticalAlignment = VAlign.Bottom;
-            btn.HorizontalAlignment = HAlign.Left;
+            lbl = new Label(horizontalFrame, "Three");
+            lbl.VerticalAlignment = VAlign.Bottom;
+            lbl.HorizontalAlignment = HAlign.Left;
 
-            btn = new Button(null, App.Button, "Four");
-            btn.VerticalAlignment = VAlign.Bottom;
-            btn.HorizontalAlignment = HAlign.Right;
-            btn.Parent = horizontalFrame;
+            lbl = new Label(horizontalFrame, "Four");
+            lbl.VerticalAlignment = VAlign.Bottom;
+            lbl.HorizontalAlignment = HAlign.Right;
+
+            horizontalFrame = new Frame(BaseFrame);
+            horizontalFrame.Layout = Layout.Horizontal;
+            lbl = new Label(horizontalFrame, "third");
+
+            horizontalFrame.Layout = Layout.Horizontal;
 
             Reset();
         }
diff --git a/DisplaySpring.XML b/DisplaySpring.XML
index 4d5069c..0881fc7 100755
--- a/DisplaySpring.XML
+++ b/DisplaySpring.XML
@@ -128,13 +128,6 @@
             This delegate is called when the Item loses Focus
             </summary>
         </member>
-        <member name="M:DisplaySpring.Item.Debug(Microsoft.Xna.Framework.Color,System.Int32)">
-            <summary>
-            A debug only functionality. Shows a rectangle around the objects different sizes. 
-            Useful for understanding layouts and easily showing width and height of items
-            Only available in debug mode, put #if DEBUG blocks around Debug calls
-            </summary>
-        </member>
         <member name="M:DisplaySpring.Item.forceRefresh">
             <summary>
             Will force a refresh on this item.
@@ -548,11 +541,6 @@
             You can give the button no background and no foreground with just text
             </summary>
         </member>
-        <member name="M:DisplaySpring.Button.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,DisplaySpring.Item)">
-            <summary>
-            Internal debugging constructor
-            </summary>
-        </member>
         <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,DisplaySpring.MultiController,Microsoft.Xna.Framework.Graphics.Texture2D)">
             <summary>
             Create a menu button with specific background
diff --git a/DisplaySpring.dll b/DisplaySpring.dll
index 443059d..34b6280 100755
Binary files a/DisplaySpring.dll and b/DisplaySpring.dll differ
diff --git a/DisplaySpring/Menu Items/Button.cs b/DisplaySpring/Menu Items/Button.cs
index bced124..3d4687e 100755
--- a/DisplaySpring/Menu Items/Button.cs	
+++ b/DisplaySpring/Menu Items/Button.cs	
@@ -107,20 +107,6 @@
         #region Constructors
 
         /// <summary>
-        /// Internal debugging constructor
-        /// </summary>
-        
-        internal Button(Texture2D debugTexture, Item parent) 
-            : base(null)
-        {
-            //TODO: make debug not a Button but a sprite
-            LayoutStretch = 0;
-            Depth = 0;
-            Parent = parent;
-            Initialize(debugTexture, null, "");
-        }
-
-        /// <summary>
         /// Create a menu button with specific background
         /// </summary>
         public Button(Item parent, MultiController c, Texture2D background) 
diff --git a/DisplaySpring/Menu Items/Frame.cs b/DisplaySpring/Menu Items/Frame.cs
index f4e8044..dc86541 100755
--- a/DisplaySpring/Menu Items/Frame.cs	
+++ b/DisplaySpring/Menu Items/Frame.cs	
@@ -151,6 +151,7 @@
 
             foreach (var v in Children)
             {
+
                 if (v.LayoutStretch == 0)
                     continue;
 
@@ -161,7 +162,7 @@
                     case LayoutType.Horizontal:
                         float width = percentage * dimensions.X;
 
-                        v.Position = new Vector2((width - dimensions.X) / 2 + pos, 0);
+                        v.LayoutPosition = new Vector2((width - dimensions.X) / 2 + pos, 0);
                         v.Width = width;
                         v.Height = dimensions.Y;
 
@@ -170,7 +171,7 @@
                     case LayoutType.Vertical:
                         float height = percentage * dimensions.Y;
 
-                        v.Position = new Vector2(0, (height - dimensions.Y) / 2 + pos);
+                        v.LayoutPosition = new Vector2(0, (height - dimensions.Y) / 2 + pos);
                         v.Width = dimensions.X;
                         v.Height = height;
 
@@ -179,6 +180,9 @@
                 }
 
                 v.refreshItem();
+
+                if (v is Frame)
+                    v.Position = v.LayoutPosition;
             }
             m_lockRefresh = false;
         }
diff --git a/DisplaySpring/Menu Items/Item.cs b/DisplaySpring/Menu Items/Item.cs
index eea3410..3e33f08 100755
--- a/DisplaySpring/Menu Items/Item.cs	
+++ b/DisplaySpring/Menu Items/Item.cs	
@@ -213,36 +213,6 @@
 
         #region Properties
 
-#if DEBUG
-        private Button m_rectSize;
-        private Button m_rectCenter;
-        private Button m_rectStaticSize;
-        private int debug_thickness = 0;
-        private Color debug_color = Color.White;
-
-        /// <summary>
-        /// A debug only functionality. Shows a rectangle around the objects different sizes. 
-        /// Useful for understanding layouts and easily showing width and height of items
-        /// Only available in debug mode, put #if DEBUG blocks around Debug calls
-        /// </summary>
-        public void Debug(Color c, int thickness)
-        {
-            debug_thickness = thickness;
-            debug_color = c;
-            Debug();
-        }
-
-        private void Debug()
-        {
-            m_rectSize = new Button(ScrollBar.CreateRectangleBorder((int)Width, (int)Height, debug_thickness, debug_color), null) { Fade = false };
-            m_rectStaticSize = new Button(ScrollBar.CreateRectangleBorder((int)StaticWidth, (int)StaticHeight, debug_thickness, debug_color), null) { Fade = false };
-            m_rectCenter = new Button(ScrollBar.CreateFilledRectangle((int)debug_thickness, (int)debug_thickness, Color.White), null) { Fade = false };
-
-            forceRefresh();
-        }
-
-#endif
-
         /// <summary>
         /// Will force a refresh on this item.
         /// If it has a parent, the parent will
@@ -277,6 +247,7 @@
                 if (oldParent != null)
                 {
                     oldParent.Children.Remove(this);
+                    oldParent.forceRefresh();
                 }
 
                 if (value != null && !value.Children.Contains(this))
@@ -329,8 +300,8 @@
                 {
                     Width = Parent.StaticWidth;
                     Height = Parent.StaticHeight;
-                    refreshItem();
                 }
+                refreshItem();
             }
         }
 
@@ -480,6 +451,10 @@
         /// </summary>
         public virtual Vector2 Position { get { return m_pos; } set { m_pos = value; } }
 
+        private Vector2 m_layoutPosition = Vector2.Zero;
+
+        public virtual Vector2 LayoutPosition { get { return m_layoutPosition; } set { m_layoutPosition = value; } }
+
         /// <summary>
         /// Animation type of the item
         /// </summary>
@@ -800,37 +775,7 @@
                 return;
 
             Draw(gameTime, spriteBatch, Matrix.Identity);
-
-#if DEBUG
-            Matrix m = ItemTransform;
-            debugDraw(gameTime, spriteBatch, Matrix.Identity);
-#endif
-        }
-
-#if DEBUG
-
-        internal void debugDraw(GameTime gameTime, SpriteBatch spriteBatch, Matrix parentTransform)
-        {
-#if DEBUG
-            debugDrawItem(gameTime, spriteBatch, m_rectSize, parentTransform, Size);
-            debugDrawItem(gameTime, spriteBatch, m_rectStaticSize, parentTransform, StaticSize);
-            debugDrawItem(gameTime, spriteBatch, m_rectCenter, parentTransform, new Vector2(debug_thickness, debug_thickness));
-
-            Matrix m = CombineMatrix(AnimationTransform(gameTime), ref parentTransform);
-            foreach (var v in Children)
-                v.debugDraw(gameTime, spriteBatch, m);
-#endif
-        }
-        internal void debugDrawItem(GameTime gameTime, SpriteBatch spriteBatch, Item item, Matrix parentTransform, Vector2 newSize)
-        {
-            if(item == null)
-                return;
-
-            item.Width = newSize.X;
-            item.Height = newSize.Y;
-            item.Draw(gameTime, spriteBatch, CombineMatrix(AnimationTransform(gameTime), ref parentTransform));
         }
-#endif
 
         /// <summary>
         /// Internal Draw with matrix transform. Used for parent->child scale, rotation, position transformations
@@ -870,16 +815,7 @@
             if ((Width == 0 && Height == 0) || Parent == null)
                 return;
 
-            Vector2 pos = Position;
-
-            if (!(Parent is Frame) || (Parent is Frame && (Parent as Frame).Layout == Layout.None))
-            {
-                if (HorizontalAlignment != HAlign.Center)
-                    pos.X = 0;
-
-                if (VerticalAlignment != VAlign.Center)
-                    pos.Y = 0;
-            }
+            Vector2 pos = LayoutPosition;
 
             switch (HorizontalAlignment)
             {
diff --git a/DisplaySpring/Menu Items/OptionButton.cs b/DisplaySpring/Menu Items/OptionButton.cs
index ab8e4d7..0e66167 100755
--- a/DisplaySpring/Menu Items/OptionButton.cs	
+++ b/DisplaySpring/Menu Items/OptionButton.cs	
@@ -112,7 +112,7 @@
         {
             CurrentIndex--;
             m_leftArrow.Enabled = true;
-            m_highlightTimer = 60;
+            m_highlightTimer = 90;
             return base.Left();
         }
 
@@ -120,7 +120,7 @@
         {
             CurrentIndex++;
             m_rightArrow.Enabled = true;
-            m_highlightTimer = 60;
+            m_highlightTimer = 90;
             return base.Right();
         }
 
diff --git a/XboxDisplaySpring.XML b/XboxDisplaySpring.XML
index d8f2d79..2bfc2ef 100755
--- a/XboxDisplaySpring.XML
+++ b/XboxDisplaySpring.XML
@@ -128,13 +128,6 @@
             This delegate is called when the Item loses Focus
             </summary>
         </member>
-        <member name="M:DisplaySpring.Item.Debug(Microsoft.Xna.Framework.Color,System.Int32)">
-            <summary>
-            A debug only functionality. Shows a rectangle around the objects different sizes. 
-            Useful for understanding layouts and easily showing width and height of items
-            Only available in debug mode, put #if DEBUG blocks around Debug calls
-            </summary>
-        </member>
         <member name="M:DisplaySpring.Item.forceRefresh">
             <summary>
             Will force a refresh on this item.
@@ -548,11 +541,6 @@
             You can give the button no background and no foreground with just text
             </summary>
         </member>
-        <member name="M:DisplaySpring.Button.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,DisplaySpring.Item)">
-            <summary>
-            Internal debugging constructor
-            </summary>
-        </member>
         <member name="M:DisplaySpring.Button.#ctor(DisplaySpring.Item,DisplaySpring.MultiController,Microsoft.Xna.Framework.Graphics.Texture2D)">
             <summary>
             Create a menu button with specific background
diff --git a/XboxDisplaySpring.dll b/XboxDisplaySpring.dll
index 20ccb0a..b4fa21d 100755
Binary files a/XboxDisplaySpring.dll and b/XboxDisplaySpring.dll differ
